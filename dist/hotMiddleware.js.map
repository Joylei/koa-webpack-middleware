{"version":3,"sources":["../src/hotMiddleware.js"],"names":["middleware","log","compiler","options","Object","assign","applyMiddleware","context","cb","req","on","stream","body","write","bind","writeHead","state","headers","set","error","next","handled"],"mappings":";;;;;kBAKwBA,U;;AALxB;;;;AACA;;AACA;;;;;;AACA,IAAMC,MAAM,qBAAM,aAAN,CAAZ;;AAEe,SAASD,UAAT,CAAoBE,QAApB,EAA4C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACvD,QAAMH,aAAa,oCAAqBE,QAArB,EAA+BE,OAAOC,MAAP,CAAc,EAAd,EAAiBF,OAAjB,CAA/B,CAAnB;;AAEA,aAASG,eAAT,CAAyBC,OAAzB,EAAkC;AAC9B,eAAO,UAACC,EAAD,EAAQ;AACXP,gBAAI,OAAJ;AACAM,oBAAQE,GAAR,CAAYC,EAAZ,CAAe,OAAf,EAAwB,YAAI;AACxBT,oBAAI,cAAJ;AACAO,mBAAG,IAAH,EAAS,KAAT;AACH,aAHD;AAIA,gBAAI;AACA,oBAAMG,SAAS,yBAAf;AACAJ,wBAAQK,IAAR,GAAeD,MAAf;AACAX,2BAAWO,QAAQE,GAAnB,EAAwB;AACpBI,2BAAOF,OAAOE,KAAP,CAAaC,IAAb,CAAkBH,MAAlB,CADa;AAEpBI,+BAAW,mBAACC,KAAD,EAAQC,OAAR,EAAmB;AAC1BV,gCAAQS,KAAR,GAAgBA,KAAhB;AACAT,gCAAQW,GAAR,CAAYD,OAAZ;AACH;AALmB,iBAAxB,EAMG;AAAA,2BAAIT,GAAG,IAAH,EAAS,KAAT,CAAJ;AAAA,iBANH;AAOH,aAVD,CAUE,OAAOW,KAAP,EAAc;AACZX,mBAAGW,KAAH;AACH;AACJ,SAnBD;AAoBH;;AAED,mCAAO,iBAAWC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACiBd,gBAAgB,IAAhB,CADjB;;AAAA;AACCe,+BADD;;AAEHpB,4BAAIoB,UAAU,SAAV,GAAsB,MAA1B;;AAFG,4BAGCA,OAHD;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAIOD,IAJP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAOH","file":"hotMiddleware.js","sourcesContent":["import webpackHotMiddleware from 'webpack-hot-middleware'\r\nimport { PassThrough } from 'stream'\r\nimport debug from 'debug'\r\nconst log = debug('webpack-hot')\r\n\r\nexport default function middleware(compiler, options = {}) {\r\n    const middleware = webpackHotMiddleware(compiler, Object.assign({},options))\r\n\r\n    function applyMiddleware(context) {\r\n        return (cb) => {\r\n            log('enter')\r\n            context.req.on('close', ()=>{\r\n                log('disconnected')\r\n                cb(null, false)\r\n            })\r\n            try {\r\n                const stream = new PassThrough()\r\n                context.body = stream\r\n                middleware(context.req, {\r\n                    write: stream.write.bind(stream),\r\n                    writeHead: (state, headers) =>{\r\n                        context.state = state\r\n                        context.set(headers)\r\n                    }\r\n                }, ()=>cb(null, false))\r\n            } catch (error) {\r\n                cb(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    return function* (next) {\r\n        let handled = yield applyMiddleware(this)\r\n        log(handled ? 'handled' : 'skip')\r\n        if(!handled){\r\n            yield next\r\n        }\r\n    }\r\n}"]}