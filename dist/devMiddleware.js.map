{"version":3,"sources":["../src/devMiddleware.js"],"names":["middleware","log","stats","chunkModules","colors","process","env","NODE_ENV","compiler","options","publicPath","output","defaults","Object","assign","waitMiddleware","context","cb","waitUntilValid","plugin","err","applyMiddleware","req","end","content","body","setHeader","name","value","headers","error","next","handled"],"mappings":";;;;;kBASwBA,U;;AATxB;;;;AACA;;;;;;AACA,IAAMC,MAAM,qBAAM,aAAN,CAAZ;;AAEA,IAAMC,QAAQ;AACVC,kBAAc,KADJ;AAEVC,YAAQ,WAAWC,QAAQC,GAAR,CAAYC;AAFrB,CAAd;;AAKe,SAASP,UAAT,CAAoBQ,QAApB,EAA4C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA,QAEnDC,UAFmD,GAGnDF,SAASC,OAAT,CAAiBE,MAHkC,CAEnDD,UAFmD;;AAIvD,QAAME,WAAWH,QAAQC,UAAR,GAAqBD,OAArB,GAA+B;AAC5CC,8BAD4C;AAE5CR;AAF4C,KAAhD;AAIA,QAAMF,aAAa,oCAAqBQ,QAArB,EAA+BK,OAAOC,MAAP,CAAc,EAAd,EAAkBF,QAAlB,EAA4BH,OAA5B,CAA/B,CAAnB;;AAEA,aAASM,cAAT,CAAwBC,OAAxB,EAAgC;AAC5B,eAAO,UAACC,EAAD,EAAO;AACVjB,uBAAWkB,cAAX,CAA0B;AAAA,uBAAKD,GAAG,IAAH,EAAS,IAAT,CAAL;AAAA,aAA1B;AACAT,qBAASW,MAAT,CAAgB,QAAhB,EAA0B,UAACC,GAAD;AAAA,uBAAQH,GAAGG,GAAH,CAAR;AAAA,aAA1B;AACH,SAHD;AAIH;;AAED,aAASC,eAAT,CAAyBL,OAAzB,EAAkC;AAC9B,eAAO,UAACC,EAAD,EAAQ;AACX,gBAAI;AACAhB,oBAAI,OAAJ;AACAD,2BAAWgB,QAAQM,GAAnB,EAAwB;AACpBC,yBAAK,aAACC,OAAD,EAAa;AACdR,gCAAQS,IAAR,GAAeD,OAAf;AACAP,2BAAG,IAAH,EAAS,IAAT;AACH,qBAJmB;AAKpBS,+BAAU,mBAACC,IAAD,EAAMC,KAAN;AAAA,+BAAgBZ,QAAQa,OAAR,CAAgBF,IAAhB,IAAwBC,KAAxC;AAAA;AALU,iBAAxB,EAMG;AAAA,2BAAKX,GAAG,IAAH,EAAS,KAAT,CAAL;AAAA,iBANH;AAOH,aATD,CASE,OAAOa,KAAP,EAAc;AACZb,mBAAGa,KAAH;AACH;AACJ,SAbD;AAcH;;AAED,mCAAO,iBAAWC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACGhB,eAAe,IAAf,CADH;;AAAA;AAAA;AAAA,+BAEiBM,gBAAgB,IAAhB,CAFjB;;AAAA;AAECW,+BAFD;;AAGH/B,4BAAI+B,UAAU,SAAV,GAAsB,MAA1B;;AAHG,4BAICA,OAJD;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKOD,IALP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAQH","file":"devMiddleware.js","sourcesContent":["import webpackDevMiddleware from 'webpack-dev-middleware'\r\nimport debug from 'debug'\r\nconst log = debug('webpack-dev')\r\n\r\nconst stats = {\r\n    chunkModules: false,\r\n    colors: 'debug' != process.env.NODE_ENV\r\n}\r\n\r\nexport default function middleware(compiler, options = {}) {\r\n    const {\r\n        publicPath\r\n    } = compiler.options.output\r\n    const defaults = options.publicPath ? options : {\r\n        publicPath,\r\n        stats\r\n    }\r\n    const middleware = webpackDevMiddleware(compiler, Object.assign({}, defaults, options))\r\n\r\n    function waitMiddleware(context){\r\n        return (cb) =>{\r\n            middleware.waitUntilValid(()=> cb(null, true))\r\n            compiler.plugin('failed', (err)=> cb(err))\r\n        }\r\n    }\r\n\r\n    function applyMiddleware(context) {\r\n        return (cb) => {\r\n            try {\r\n                log('enter')\r\n                middleware(context.req, {\r\n                    end: (content) => {\r\n                        context.body = content\r\n                        cb(null, true)\r\n                    },\r\n                    setHeader:(name,value) => context.headers[name] = value\r\n                }, ()=> cb(null, false))\r\n            } catch (error) {\r\n                cb(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    return function* (next) {\r\n        yield waitMiddleware(this)\r\n        let handled = yield applyMiddleware(this)\r\n        log(handled ? 'handled' : 'skip')\r\n        if(!handled){\r\n            yield next\r\n        }\r\n    }\r\n}"]}